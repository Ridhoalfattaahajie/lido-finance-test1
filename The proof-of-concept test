
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "../../src/utils/entropy.sol";

contract PoCTest is Test {
    using EntropyUtils for bytes;

    function testBypassFingerprint() public {
        bytes memory original = abi.encodePacked("secure-data");
        bytes memory noise = abi.encodePacked(uint256(123456));
        bytes32 fingerprint = EntropyUtils.adaptiveFingerprint(original, noise);

        // Adversary attempts to silently deviate
        bytes memory manipulated = abi.encodePacked("secure-data");
        bytes memory injectedNoise = abi.encodePacked(uint256(123456)); // same noise

        assertEq(keccak256(abi.encodePacked(manipulated, injectedNoise)), fingerprint, "Bypass fingerprint failed");
    }
}
